/* soapC2BPaymentValidationAndConfirmationBindingService.cpp
   Generated by gSOAP 2.8.60 for mpesab2b.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapC2BPaymentValidationAndConfirmationBindingService.h"

C2BPaymentValidationAndConfirmationBindingService::C2BPaymentValidationAndConfirmationBindingService()
{	this->soap = soap_new();
	this->soap_own = true;
	C2BPaymentValidationAndConfirmationBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

C2BPaymentValidationAndConfirmationBindingService::C2BPaymentValidationAndConfirmationBindingService(const C2BPaymentValidationAndConfirmationBindingService& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
}

C2BPaymentValidationAndConfirmationBindingService::C2BPaymentValidationAndConfirmationBindingService(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	C2BPaymentValidationAndConfirmationBindingService_init(_soap->imode, _soap->omode);
}

C2BPaymentValidationAndConfirmationBindingService::C2BPaymentValidationAndConfirmationBindingService(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	C2BPaymentValidationAndConfirmationBindingService_init(iomode, iomode);
}

C2BPaymentValidationAndConfirmationBindingService::C2BPaymentValidationAndConfirmationBindingService(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	C2BPaymentValidationAndConfirmationBindingService_init(imode, omode);
}

C2BPaymentValidationAndConfirmationBindingService::~C2BPaymentValidationAndConfirmationBindingService()
{	if (this->soap_own)
		soap_free(this->soap);
}

void C2BPaymentValidationAndConfirmationBindingService::C2BPaymentValidationAndConfirmationBindingService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
        {"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"ns1", "http://cps.huawei.com/cpsinterface/c2bpayment", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

void C2BPaymentValidationAndConfirmationBindingService::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void C2BPaymentValidationAndConfirmationBindingService::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	C2BPaymentValidationAndConfirmationBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
C2BPaymentValidationAndConfirmationBindingService *C2BPaymentValidationAndConfirmationBindingService::copy()
{	C2BPaymentValidationAndConfirmationBindingService *dup = SOAP_NEW_UNMANAGED(C2BPaymentValidationAndConfirmationBindingService);
	if (dup)
		soap_copy_context(dup->soap, this->soap);
	return dup;
}
#endif

C2BPaymentValidationAndConfirmationBindingService& C2BPaymentValidationAndConfirmationBindingService::operator=(const C2BPaymentValidationAndConfirmationBindingService& rhs)
{	if (this->soap != rhs.soap)
	{	if (this->soap_own)
			soap_free(this->soap);
		this->soap = rhs.soap;
		this->soap_own = false;
	}
	return *this;
}

int C2BPaymentValidationAndConfirmationBindingService::soap_close_socket()
{	return soap_closesock(this->soap);
}

int C2BPaymentValidationAndConfirmationBindingService::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

int C2BPaymentValidationAndConfirmationBindingService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this->soap, string, detailXML);
}

int C2BPaymentValidationAndConfirmationBindingService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

int C2BPaymentValidationAndConfirmationBindingService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this->soap, string, detailXML);
}

int C2BPaymentValidationAndConfirmationBindingService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

void C2BPaymentValidationAndConfirmationBindingService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void C2BPaymentValidationAndConfirmationBindingService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *C2BPaymentValidationAndConfirmationBindingService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

void C2BPaymentValidationAndConfirmationBindingService::soap_noheader()
{	this->soap->header = NULL;
}

::SOAP_ENV__Header *C2BPaymentValidationAndConfirmationBindingService::soap_header()
{	return this->soap->header;
}

#ifndef WITH_NOIO
int C2BPaymentValidationAndConfirmationBindingService::run(int port)
{	if (!soap_valid_socket(this->soap->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->soap->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->soap->errnum == 0) // timeout?
				this->soap->error = SOAP_OK;
			break;
		}
		if (this->serve())
			break;
		this->destroy();
	}
	return this->soap->error;
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int C2BPaymentValidationAndConfirmationBindingService::ssl_run(int port)
{	if (!soap_valid_socket(this->soap->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->soap->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->soap->errnum == 0) // timeout?
				this->soap->error = SOAP_OK;
			break;
		}
		if (this->ssl_accept() || this->serve())
			break;
		this->destroy();
	}
	return this->soap->error;
}
#endif

SOAP_SOCKET C2BPaymentValidationAndConfirmationBindingService::bind(const char *host, int port, int backlog)
{	return soap_bind(this->soap, host, port, backlog);
}

SOAP_SOCKET C2BPaymentValidationAndConfirmationBindingService::accept()
{	return soap_accept(this->soap);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int C2BPaymentValidationAndConfirmationBindingService::ssl_accept()
{	return soap_ssl_accept(this->soap);
}
#endif
#endif

int C2BPaymentValidationAndConfirmationBindingService::serve()
{
#ifndef WITH_FASTCGI
	this->soap->keep_alive = this->soap->max_keep_alive + 1;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (this->soap->keep_alive > 0 && this->soap->max_keep_alive > 0)
			this->soap->keep_alive--;
#endif
		if (soap_begin_serve(this->soap))
		{	if (this->soap->error >= SOAP_STOP)
				continue;
			return this->soap->error;
		}
		if ((dispatch() || (this->soap->fserveloop && this->soap->fserveloop(this->soap))) && this->soap->error && this->soap->error < SOAP_STOP)
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this->soap);
#else
			return soap_send_fault(this->soap);
#endif
		}
#ifdef WITH_FASTCGI
		soap_destroy(this->soap);
		soap_end(this->soap);
	} while (1);
#else
	} while (this->soap->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___ns1__ValidateC2BPayment(struct soap*, C2BPaymentValidationAndConfirmationBindingService*);
static int serve___ns1__ConfirmC2BPayment(struct soap*, C2BPaymentValidationAndConfirmationBindingService*);

int C2BPaymentValidationAndConfirmationBindingService::dispatch()
{	return dispatch(this->soap);
}

int C2BPaymentValidationAndConfirmationBindingService::dispatch(struct soap* soap)
{
	C2BPaymentValidationAndConfirmationBindingService_init(soap->imode, soap->omode);

	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:C2BPaymentValidationRequest"))
		return serve___ns1__ValidateC2BPayment(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:C2BPaymentConfirmationRequest"))
		return serve___ns1__ConfirmC2BPayment(soap, this);
	return soap->error = SOAP_NO_METHOD;
}

static int serve___ns1__ValidateC2BPayment(struct soap *soap, C2BPaymentValidationAndConfirmationBindingService *service)
{	struct __ns1__ValidateC2BPayment soap_tmp___ns1__ValidateC2BPayment;
	_ns1__C2BPaymentValidationResult ns1__C2BPaymentValidationResult;
	ns1__C2BPaymentValidationResult.soap_default(soap);
	soap_default___ns1__ValidateC2BPayment(soap, &soap_tmp___ns1__ValidateC2BPayment);
	if (!soap_get___ns1__ValidateC2BPayment(soap, &soap_tmp___ns1__ValidateC2BPayment, "-ns1:ValidateC2BPayment", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->ValidateC2BPayment(soap_tmp___ns1__ValidateC2BPayment.ns1__C2BPaymentValidationRequest, ns1__C2BPaymentValidationResult);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__C2BPaymentValidationResult.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__C2BPaymentValidationResult.soap_put(soap, "ns1:C2BPaymentValidationResult", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__C2BPaymentValidationResult.soap_put(soap, "ns1:C2BPaymentValidationResult", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__ConfirmC2BPayment(struct soap *soap, C2BPaymentValidationAndConfirmationBindingService *service)
{	struct __ns1__ConfirmC2BPayment soap_tmp___ns1__ConfirmC2BPayment;
	struct __ns1__ConfirmC2BPaymentResponse soap_tmp___ns1__ConfirmC2BPaymentResponse;
	soap_default___ns1__ConfirmC2BPaymentResponse(soap, &soap_tmp___ns1__ConfirmC2BPaymentResponse);
	soap_default___ns1__ConfirmC2BPayment(soap, &soap_tmp___ns1__ConfirmC2BPayment);
	if (!soap_get___ns1__ConfirmC2BPayment(soap, &soap_tmp___ns1__ConfirmC2BPayment, "-ns1:ConfirmC2BPayment", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->ConfirmC2BPayment(soap_tmp___ns1__ConfirmC2BPayment.ns1__C2BPaymentConfirmationRequest, soap_tmp___ns1__ConfirmC2BPaymentResponse.ns1__C2BPaymentConfirmationResult);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__ConfirmC2BPaymentResponse(soap, &soap_tmp___ns1__ConfirmC2BPaymentResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ConfirmC2BPaymentResponse(soap, &soap_tmp___ns1__ConfirmC2BPaymentResponse, "-ns1:ConfirmC2BPaymentResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ConfirmC2BPaymentResponse(soap, &soap_tmp___ns1__ConfirmC2BPaymentResponse, "-ns1:ConfirmC2BPaymentResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
