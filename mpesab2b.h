// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* mpesab2b.h
   Generated by wsdl2h 2.8.60 from wsdl/AZDTBMPesaB2BService.wsdl and typemap.dat
   2018-01-24 23:46:25 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on mpesab2b.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://cps.huawei.com/cpsinterface/c2bpayment                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

#include <vector>
template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://cps.huawei.com/cpsinterface/c2bpayment"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://cps.huawei.com/cpsinterface/c2bpayment"
//gsoap ns1   schema namespace:	http://cps.huawei.com/cpsinterface/c2bpayment
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class _ns1__C2BPaymentValidationRequest.
class _ns1__C2BPaymentValidationRequest;

//  Forward declaration of class _ns1__C2BPaymentValidationResult.
class _ns1__C2BPaymentValidationResult;

//  Forward declaration of class _ns1__C2BPaymentConfirmationRequest.
class _ns1__C2BPaymentConfirmationRequest;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://cps.huawei.com/cpsinterface/c2bpayment                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://cps.huawei.com/cpsinterface/c2bpayment                            *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://cps.huawei.com/cpsinterface/c2bpayment":C2BPaymentValidationRequest
/// @brief "http://cps.huawei.com/cpsinterface/c2bpayment":C2BPaymentValidationRequest is a complexType.
///
/// class _ns1__C2BPaymentValidationRequest operations:
/// - _ns1__C2BPaymentValidationRequest* soap_new__ns1__C2BPaymentValidationRequest(soap*) allocate and default initialize
/// - _ns1__C2BPaymentValidationRequest* soap_new__ns1__C2BPaymentValidationRequest(soap*, int num) allocate array and default initialize values
/// - _ns1__C2BPaymentValidationRequest* soap_new_req__ns1__C2BPaymentValidationRequest(soap*, ...) allocate, set required members
/// - _ns1__C2BPaymentValidationRequest* soap_new_set__ns1__C2BPaymentValidationRequest(soap*, ...) allocate, set all public members
/// - _ns1__C2BPaymentValidationRequest::soap_default(soap*) default initialize members
/// - int soap_read__ns1__C2BPaymentValidationRequest(soap*, _ns1__C2BPaymentValidationRequest*) deserialize from a stream
/// - int soap_write__ns1__C2BPaymentValidationRequest(soap*, _ns1__C2BPaymentValidationRequest*) serialize to a stream
/// - _ns1__C2BPaymentValidationRequest* _ns1__C2BPaymentValidationRequest::soap_dup(soap*) returns deep copy of _ns1__C2BPaymentValidationRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__C2BPaymentValidationRequest::soap_del() deep deletes _ns1__C2BPaymentValidationRequest data members, use only after _ns1__C2BPaymentValidationRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__C2BPaymentValidationRequest
{ public:
/// Element "TransType" of XSD type xs:string.
    std::string                          TransType                      1;	///< Required element.
/// Element "TransID" of XSD type xs:string.
    std::string                          TransID                        1;	///< Required element.
/// Element "TransTime" of XSD type xs:string.
    std::string                          TransTime                      1;	///< Required element.
/// Element "TransAmount" of XSD type xs:string.
    std::string                          TransAmount                    1;	///< Required element.
/// Element "BusinessShortCode" of XSD type xs:string.
    std::string                          BusinessShortCode              1;	///< Required element.
/// Element "BillRefNumber" of XSD type xs:string.
    std::string*                         BillRefNumber                  0;	///< Optional element.
/// Element "InvoiceNumber" of XSD type xs:string.
    std::string*                         InvoiceNumber                  0;	///< Optional element.
/// Element "MSISDN" of XSD type xs:string.
    std::string                          MSISDN                         1;	///< Required element.
/// Vector of KYCInfo of length 0..unbounded.
    std::vector<
/// class _ns1__C2BPaymentValidationRequest_KYCInfo operations:
/// - _ns1__C2BPaymentValidationRequest_KYCInfo* soap_new__ns1__C2BPaymentValidationRequest_KYCInfo(soap*) allocate and default initialize
/// - _ns1__C2BPaymentValidationRequest_KYCInfo* soap_new__ns1__C2BPaymentValidationRequest_KYCInfo(soap*, int num) allocate array and default initialize values
/// - _ns1__C2BPaymentValidationRequest_KYCInfo* soap_new_req__ns1__C2BPaymentValidationRequest_KYCInfo(soap*, ...) allocate, set required members
/// - _ns1__C2BPaymentValidationRequest_KYCInfo* soap_new_set__ns1__C2BPaymentValidationRequest_KYCInfo(soap*, ...) allocate, set all public members
/// - _ns1__C2BPaymentValidationRequest_KYCInfo::soap_default(soap*) default initialize members
/// - int soap_read__ns1__C2BPaymentValidationRequest_KYCInfo(soap*, _ns1__C2BPaymentValidationRequest_KYCInfo*) deserialize from a stream
/// - int soap_write__ns1__C2BPaymentValidationRequest_KYCInfo(soap*, _ns1__C2BPaymentValidationRequest_KYCInfo*) serialize to a stream
/// - _ns1__C2BPaymentValidationRequest_KYCInfo* _ns1__C2BPaymentValidationRequest_KYCInfo::soap_dup(soap*) returns deep copy of _ns1__C2BPaymentValidationRequest_KYCInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__C2BPaymentValidationRequest_KYCInfo::soap_del() deep deletes _ns1__C2BPaymentValidationRequest_KYCInfo data members, use only after _ns1__C2BPaymentValidationRequest_KYCInfo::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns1__C2BPaymentValidationRequest_KYCInfo
    {

/// </BLOCKQUOTE></PRE>
/// Length of this content is 0 to 255.
    std::string                                                        
                                         KYCName                        1;	///< Required element.
/// Length of this content is 0 to 128.
    std::string                                                        
                                         KYCValue                       1;	///< Required element.
    }>                                   KYCInfo                        0;	///< Multiple elements.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://cps.huawei.com/cpsinterface/c2bpayment":C2BPaymentValidationResult
/// @brief "http://cps.huawei.com/cpsinterface/c2bpayment":C2BPaymentValidationResult is a complexType.
///
/// class _ns1__C2BPaymentValidationResult operations:
/// - _ns1__C2BPaymentValidationResult* soap_new__ns1__C2BPaymentValidationResult(soap*) allocate and default initialize
/// - _ns1__C2BPaymentValidationResult* soap_new__ns1__C2BPaymentValidationResult(soap*, int num) allocate array and default initialize values
/// - _ns1__C2BPaymentValidationResult* soap_new_req__ns1__C2BPaymentValidationResult(soap*, ...) allocate, set required members
/// - _ns1__C2BPaymentValidationResult* soap_new_set__ns1__C2BPaymentValidationResult(soap*, ...) allocate, set all public members
/// - _ns1__C2BPaymentValidationResult::soap_default(soap*) default initialize members
/// - int soap_read__ns1__C2BPaymentValidationResult(soap*, _ns1__C2BPaymentValidationResult*) deserialize from a stream
/// - int soap_write__ns1__C2BPaymentValidationResult(soap*, _ns1__C2BPaymentValidationResult*) serialize to a stream
/// - _ns1__C2BPaymentValidationResult* _ns1__C2BPaymentValidationResult::soap_dup(soap*) returns deep copy of _ns1__C2BPaymentValidationResult, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__C2BPaymentValidationResult::soap_del() deep deletes _ns1__C2BPaymentValidationResult data members, use only after _ns1__C2BPaymentValidationResult::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__C2BPaymentValidationResult
{ public:
/// Length of this content is 0 to 20.
    std::string                                                        
                                         ResultCode                     1;	///< Required element.
/// Length of this content is 0 to 1024.
    std::string                                                        
                                        *ResultDesc                     0;	///< Optional element.
/// Element "ThirdPartyTransID" of XSD type xs:string.
    std::string*                         ThirdPartyTransID              0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://cps.huawei.com/cpsinterface/c2bpayment":C2BPaymentConfirmationRequest
/// @brief "http://cps.huawei.com/cpsinterface/c2bpayment":C2BPaymentConfirmationRequest is a complexType.
///
/// class _ns1__C2BPaymentConfirmationRequest operations:
/// - _ns1__C2BPaymentConfirmationRequest* soap_new__ns1__C2BPaymentConfirmationRequest(soap*) allocate and default initialize
/// - _ns1__C2BPaymentConfirmationRequest* soap_new__ns1__C2BPaymentConfirmationRequest(soap*, int num) allocate array and default initialize values
/// - _ns1__C2BPaymentConfirmationRequest* soap_new_req__ns1__C2BPaymentConfirmationRequest(soap*, ...) allocate, set required members
/// - _ns1__C2BPaymentConfirmationRequest* soap_new_set__ns1__C2BPaymentConfirmationRequest(soap*, ...) allocate, set all public members
/// - _ns1__C2BPaymentConfirmationRequest::soap_default(soap*) default initialize members
/// - int soap_read__ns1__C2BPaymentConfirmationRequest(soap*, _ns1__C2BPaymentConfirmationRequest*) deserialize from a stream
/// - int soap_write__ns1__C2BPaymentConfirmationRequest(soap*, _ns1__C2BPaymentConfirmationRequest*) serialize to a stream
/// - _ns1__C2BPaymentConfirmationRequest* _ns1__C2BPaymentConfirmationRequest::soap_dup(soap*) returns deep copy of _ns1__C2BPaymentConfirmationRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__C2BPaymentConfirmationRequest::soap_del() deep deletes _ns1__C2BPaymentConfirmationRequest data members, use only after _ns1__C2BPaymentConfirmationRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__C2BPaymentConfirmationRequest
{ public:
/// Element "TransactionType" of XSD type xs:string.
    std::string                          TransactionType                1;	///< Required element.
/// Element "TransID" of XSD type xs:string.
    std::string                          TransID                        1;	///< Required element.
/// Element "TransTime" of XSD type xs:string.
    std::string                          TransTime                      1;	///< Required element.
/// Element "TransAmount" of XSD type xs:string.
    std::string                          TransAmount                    1;	///< Required element.
/// Element "BusinessShortCode" of XSD type xs:string.
    std::string                          BusinessShortCode              1;	///< Required element.
/// Element "BillRefNumber" of XSD type xs:string.
    std::string*                         BillRefNumber                  0;	///< Optional element.
/// Element "InvoiceNumber" of XSD type xs:string.
    std::string*                         InvoiceNumber                  0;	///< Optional element.
/// Element "OrgAccountBalance" of XSD type xs:string.
    std::string                          OrgAccountBalance              1;	///< Required element.
/// Element "ThirdPartyTransID" of XSD type xs:string.
    std::string*                         ThirdPartyTransID              0;	///< Optional element.
/// Element "MSISDN" of XSD type xs:string.
    std::string                          MSISDN                         1;	///< Required element.
/// Vector of KYCInfo of length 0..unbounded.
    std::vector<
/// class _ns1__C2BPaymentConfirmationRequest_KYCInfo operations:
/// - _ns1__C2BPaymentConfirmationRequest_KYCInfo* soap_new__ns1__C2BPaymentConfirmationRequest_KYCInfo(soap*) allocate and default initialize
/// - _ns1__C2BPaymentConfirmationRequest_KYCInfo* soap_new__ns1__C2BPaymentConfirmationRequest_KYCInfo(soap*, int num) allocate array and default initialize values
/// - _ns1__C2BPaymentConfirmationRequest_KYCInfo* soap_new_req__ns1__C2BPaymentConfirmationRequest_KYCInfo(soap*, ...) allocate, set required members
/// - _ns1__C2BPaymentConfirmationRequest_KYCInfo* soap_new_set__ns1__C2BPaymentConfirmationRequest_KYCInfo(soap*, ...) allocate, set all public members
/// - _ns1__C2BPaymentConfirmationRequest_KYCInfo::soap_default(soap*) default initialize members
/// - int soap_read__ns1__C2BPaymentConfirmationRequest_KYCInfo(soap*, _ns1__C2BPaymentConfirmationRequest_KYCInfo*) deserialize from a stream
/// - int soap_write__ns1__C2BPaymentConfirmationRequest_KYCInfo(soap*, _ns1__C2BPaymentConfirmationRequest_KYCInfo*) serialize to a stream
/// - _ns1__C2BPaymentConfirmationRequest_KYCInfo* _ns1__C2BPaymentConfirmationRequest_KYCInfo::soap_dup(soap*) returns deep copy of _ns1__C2BPaymentConfirmationRequest_KYCInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__C2BPaymentConfirmationRequest_KYCInfo::soap_del() deep deletes _ns1__C2BPaymentConfirmationRequest_KYCInfo data members, use only after _ns1__C2BPaymentConfirmationRequest_KYCInfo::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns1__C2BPaymentConfirmationRequest_KYCInfo
    {
/// Element "KYCName" of XSD type xs:string.
    std::string                          KYCName                        1;	///< Required element.
/// Element "KYCValue" of XSD type xs:string.
    std::string                          KYCValue                       1;	///< Required element.
    }>                                   KYCInfo                        0;	///< Multiple elements.
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://cps.huawei.com/cpsinterface/c2bpayment                            *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://cps.huawei.com/cpsinterface/c2bpayment":C2BPaymentConfirmationResult of XSD type xs:string.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://cps.huawei.com/cpsinterface/c2bpayment                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	C2BPaymentValidationAndConfirmationBinding 
//gsoap ns1  service type:	C2BPaymentValidationAndComfirmation 
//gsoap ns1  service port:	https://10.137.129.26:8310/eXSAPI/proxy/DTBMPesaC2BProxyService 
//gsoap ns1  service namespace:	http://cps.huawei.com/cpsinterface/c2bpayment 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref C2BPaymentValidationAndConfirmationBinding

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page C2BPaymentValidationAndConfirmationBinding Binding "C2BPaymentValidationAndConfirmationBinding"

@section C2BPaymentValidationAndConfirmationBinding_service Service Documentation "C2BPaymentValidationAndConfirmationBinding"
OSB Service

@section C2BPaymentValidationAndConfirmationBinding_operations Operations of Binding "C2BPaymentValidationAndConfirmationBinding"

  - @ref __ns1__ValidateC2BPayment

  - @ref __ns1__ConfirmC2BPayment

@section C2BPaymentValidationAndConfirmationBinding_ports Default endpoints of Binding "C2BPaymentValidationAndConfirmationBinding"

  - https://10.137.129.26:8310/eXSAPI/proxy/DTBMPesaC2BProxyService

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   C2BPaymentValidationAndConfirmationBinding                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ValidateC2BPayment                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ValidateC2BPayment" of service binding "C2BPaymentValidationAndConfirmationBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://10.137.129.26:8310/eXSAPI/proxy/DTBMPesaC2BProxyService

  - Default SOAP action or REST location path:
    - "ValidateC2BPayment"

  - Addressing input action: "ValidateC2BPayment"

  - Addressing output action: "ValidateC2BPaymentResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ValidateC2BPayment(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__C2BPaymentValidationRequest*  ns1__C2BPaymentValidationRequest,
    // output parameters:
    _ns1__C2BPaymentValidationResult   &ns1__C2BPaymentValidationResult
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ValidateC2BPayment(
    struct soap *soap,
    // input parameters:
    _ns1__C2BPaymentValidationRequest*  ns1__C2BPaymentValidationRequest,
    // output parameters:
    _ns1__C2BPaymentValidationResult   &ns1__C2BPaymentValidationResult
  );
@endcode

C++ proxy class (defined in soapC2BPaymentValidationAndConfirmationBindingProxy.h generated with soapcpp2):
@code
  class C2BPaymentValidationAndConfirmationBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapC2BPaymentValidationAndConfirmationBindingService.h generated with soapcpp2):
@code
  class C2BPaymentValidationAndConfirmationBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ValidateC2BPayment SOAP
//gsoap ns1  service method-style:	ValidateC2BPayment document
//gsoap ns1  service method-encoding:	ValidateC2BPayment literal
//gsoap ns1  service method-input-action:	ValidateC2BPayment ValidateC2BPayment
//gsoap ns1  service method-output-action:	ValidateC2BPayment ValidateC2BPaymentResponse
int __ns1__ValidateC2BPayment(
    _ns1__C2BPaymentValidationRequest*  ns1__C2BPaymentValidationRequest,	///< Input parameter
    _ns1__C2BPaymentValidationResult   &ns1__C2BPaymentValidationResult	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ConfirmC2BPayment                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ConfirmC2BPayment" of service binding "C2BPaymentValidationAndConfirmationBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://10.137.129.26:8310/eXSAPI/proxy/DTBMPesaC2BProxyService

  - Default SOAP action or REST location path:
    - "ConfirmC2BPayment"

  - Addressing input action: "ConfirmC2BPayment"

  - Addressing output action: "ConfirmC2BPaymentResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ConfirmC2BPayment(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__C2BPaymentConfirmationRequest* ns1__C2BPaymentConfirmationRequest,
    // output parameters:
    std::string                        &ns1__C2BPaymentConfirmationResult
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ConfirmC2BPayment(
    struct soap *soap,
    // input parameters:
    _ns1__C2BPaymentConfirmationRequest* ns1__C2BPaymentConfirmationRequest,
    // output parameters:
    std::string                        &ns1__C2BPaymentConfirmationResult
  );
@endcode

C++ proxy class (defined in soapC2BPaymentValidationAndConfirmationBindingProxy.h generated with soapcpp2):
@code
  class C2BPaymentValidationAndConfirmationBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapC2BPaymentValidationAndConfirmationBindingService.h generated with soapcpp2):
@code
  class C2BPaymentValidationAndConfirmationBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ConfirmC2BPayment SOAP
//gsoap ns1  service method-style:	ConfirmC2BPayment document
//gsoap ns1  service method-encoding:	ConfirmC2BPayment literal
//gsoap ns1  service method-input-action:	ConfirmC2BPayment ConfirmC2BPayment
//gsoap ns1  service method-output-action:	ConfirmC2BPayment ConfirmC2BPaymentResponse
int __ns1__ConfirmC2BPayment(
    _ns1__C2BPaymentConfirmationRequest* ns1__C2BPaymentConfirmationRequest,	///< Input parameter
    std::string                        &ns1__C2BPaymentConfirmationResult	///< Output parameter
);

/**

@page C2BPaymentValidationAndConfirmationBinding Binding "C2BPaymentValidationAndConfirmationBinding"

@section C2BPaymentValidationAndConfirmationBinding_policy_enablers Policy Enablers of Binding "C2BPaymentValidationAndConfirmationBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://cps.huawei.com/cpsinterface/c2bpayment"

  - <ns1:C2BPaymentValidationRequest> @ref _ns1__C2BPaymentValidationRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__C2BPaymentValidationRequest(struct soap*, _ns1__C2BPaymentValidationRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__C2BPaymentValidationRequest(struct soap*, _ns1__C2BPaymentValidationRequest*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__C2BPaymentValidationRequest(struct soap*, const char *URL, _ns1__C2BPaymentValidationRequest*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__C2BPaymentValidationRequest(struct soap*, const char *URL, _ns1__C2BPaymentValidationRequest*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__C2BPaymentValidationRequest(struct soap*, const char *URL, _ns1__C2BPaymentValidationRequest*);
    soap_POST_recv__ns1__C2BPaymentValidationRequest(struct soap*, _ns1__C2BPaymentValidationRequest*);
    @endcode

  - <ns1:C2BPaymentValidationResult> @ref _ns1__C2BPaymentValidationResult
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__C2BPaymentValidationResult(struct soap*, _ns1__C2BPaymentValidationResult*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__C2BPaymentValidationResult(struct soap*, _ns1__C2BPaymentValidationResult*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__C2BPaymentValidationResult(struct soap*, const char *URL, _ns1__C2BPaymentValidationResult*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__C2BPaymentValidationResult(struct soap*, const char *URL, _ns1__C2BPaymentValidationResult*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__C2BPaymentValidationResult(struct soap*, const char *URL, _ns1__C2BPaymentValidationResult*);
    soap_POST_recv__ns1__C2BPaymentValidationResult(struct soap*, _ns1__C2BPaymentValidationResult*);
    @endcode

  - <ns1:C2BPaymentConfirmationRequest> @ref _ns1__C2BPaymentConfirmationRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__C2BPaymentConfirmationRequest(struct soap*, _ns1__C2BPaymentConfirmationRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__C2BPaymentConfirmationRequest(struct soap*, _ns1__C2BPaymentConfirmationRequest*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__C2BPaymentConfirmationRequest(struct soap*, const char *URL, _ns1__C2BPaymentConfirmationRequest*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__C2BPaymentConfirmationRequest(struct soap*, const char *URL, _ns1__C2BPaymentConfirmationRequest*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__C2BPaymentConfirmationRequest(struct soap*, const char *URL, _ns1__C2BPaymentConfirmationRequest*);
    soap_POST_recv__ns1__C2BPaymentConfirmationRequest(struct soap*, _ns1__C2BPaymentConfirmationRequest*);
    @endcode

  - <ns1:C2BPaymentConfirmationResult> (use wsdl2h option -g to auto-generate type _ns1__C2BPaymentConfirmationResult)

*/

/* End of mpesab2b.h */
