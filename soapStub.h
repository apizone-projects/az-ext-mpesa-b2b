/* soapStub.h
   Generated by gSOAP 2.8.60 for mpesab2b.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://cps.huawei.com/cpsinterface/c2bpayment"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20860
# error "GSOAP VERSION 20860 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class _ns1__C2BPaymentValidationRequest_KYCInfo;	/* mpesab2b.h:214 */
class _ns1__C2BPaymentValidationRequest;	/* mpesab2b.h:147 */
class _ns1__C2BPaymentValidationResult;	/* mpesab2b.h:150 */
class _ns1__C2BPaymentConfirmationRequest_KYCInfo;	/* mpesab2b.h:301 */
class _ns1__C2BPaymentConfirmationRequest;	/* mpesab2b.h:153 */
struct __ns1__ValidateC2BPayment;	/* mpesab2b.h:461 */
struct __ns1__ConfirmC2BPaymentResponse;	/* mpesab2b.h:531 */
struct __ns1__ConfirmC2BPayment;	/* mpesab2b.h:531 */

/* mpesab2b.h:214 */
#ifndef SOAP_TYPE__ns1__C2BPaymentValidationRequest_KYCInfo
#define SOAP_TYPE__ns1__C2BPaymentValidationRequest_KYCInfo (13)
/* complex XSD type 'ns1:C2BPaymentValidationRequest-KYCInfo': */
class SOAP_CMAC _ns1__C2BPaymentValidationRequest_KYCInfo {
      public:
        /// Required element 'KYCName' of XSD type 'xsd:string'
        std::string KYCName;
        /// Required element 'KYCValue' of XSD type 'xsd:string'
        std::string KYCValue;
      public:
        /// Return unique type id SOAP_TYPE__ns1__C2BPaymentValidationRequest_KYCInfo
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__C2BPaymentValidationRequest_KYCInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__C2BPaymentValidationRequest_KYCInfo, default initialized and not managed by a soap context
        virtual _ns1__C2BPaymentValidationRequest_KYCInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__C2BPaymentValidationRequest_KYCInfo); }
      public:
        /// Constructor with initializations
        _ns1__C2BPaymentValidationRequest_KYCInfo() : KYCName(), KYCValue() { }
        virtual ~_ns1__C2BPaymentValidationRequest_KYCInfo() { }
        /// Friend allocator used by soap_new__ns1__C2BPaymentValidationRequest_KYCInfo(struct soap*, int)
        friend SOAP_FMAC1 _ns1__C2BPaymentValidationRequest_KYCInfo * SOAP_FMAC2 soap_instantiate__ns1__C2BPaymentValidationRequest_KYCInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mpesab2b.h:147 */
#ifndef SOAP_TYPE__ns1__C2BPaymentValidationRequest
#define SOAP_TYPE__ns1__C2BPaymentValidationRequest (8)
/* complex XSD type 'ns1:C2BPaymentValidationRequest': */
class SOAP_CMAC _ns1__C2BPaymentValidationRequest {
      public:
        /// Required element 'TransType' of XSD type 'xsd:string'
        std::string TransType;
        /// Required element 'TransID' of XSD type 'xsd:string'
        std::string TransID;
        /// Required element 'TransTime' of XSD type 'xsd:string'
        std::string TransTime;
        /// Required element 'TransAmount' of XSD type 'xsd:string'
        std::string TransAmount;
        /// Required element 'BusinessShortCode' of XSD type 'xsd:string'
        std::string BusinessShortCode;
        /// Optional element 'BillRefNumber' of XSD type 'xsd:string'
        std::string *BillRefNumber;
        /// Optional element 'InvoiceNumber' of XSD type 'xsd:string'
        std::string *InvoiceNumber;
        /// Required element 'MSISDN' of XSD type 'xsd:string'
        std::string MSISDN;
        /// Optional element 'KYCInfo' of XSD type 'ns1:C2BPaymentValidationRequest-KYCInfo'
        std::vector<_ns1__C2BPaymentValidationRequest_KYCInfo> KYCInfo;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__C2BPaymentValidationRequest
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__C2BPaymentValidationRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__C2BPaymentValidationRequest, default initialized and not managed by a soap context
        virtual _ns1__C2BPaymentValidationRequest *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__C2BPaymentValidationRequest); }
      public:
        /// Constructor with initializations
        _ns1__C2BPaymentValidationRequest() : TransType(), TransID(), TransTime(), TransAmount(), BusinessShortCode(), BillRefNumber(), InvoiceNumber(), MSISDN(), KYCInfo(), soap() { }
        virtual ~_ns1__C2BPaymentValidationRequest() { }
        /// Friend allocator used by soap_new__ns1__C2BPaymentValidationRequest(struct soap*, int)
        friend SOAP_FMAC1 _ns1__C2BPaymentValidationRequest * SOAP_FMAC2 soap_instantiate__ns1__C2BPaymentValidationRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mpesab2b.h:150 */
#ifndef SOAP_TYPE__ns1__C2BPaymentValidationResult
#define SOAP_TYPE__ns1__C2BPaymentValidationResult (9)
/* complex XSD type 'ns1:C2BPaymentValidationResult': */
class SOAP_CMAC _ns1__C2BPaymentValidationResult {
      public:
        /// Required element 'ResultCode' of XSD type 'xsd:string'
        std::string ResultCode;
        /// Optional element 'ResultDesc' of XSD type 'xsd:string'
        std::string *ResultDesc;
        /// Optional element 'ThirdPartyTransID' of XSD type 'xsd:string'
        std::string *ThirdPartyTransID;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__C2BPaymentValidationResult
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__C2BPaymentValidationResult; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__C2BPaymentValidationResult, default initialized and not managed by a soap context
        virtual _ns1__C2BPaymentValidationResult *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__C2BPaymentValidationResult); }
      public:
        /// Constructor with initializations
        _ns1__C2BPaymentValidationResult() : ResultCode(), ResultDesc(), ThirdPartyTransID(), soap() { }
        virtual ~_ns1__C2BPaymentValidationResult() { }
        /// Friend allocator used by soap_new__ns1__C2BPaymentValidationResult(struct soap*, int)
        friend SOAP_FMAC1 _ns1__C2BPaymentValidationResult * SOAP_FMAC2 soap_instantiate__ns1__C2BPaymentValidationResult(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mpesab2b.h:301 */
#ifndef SOAP_TYPE__ns1__C2BPaymentConfirmationRequest_KYCInfo
#define SOAP_TYPE__ns1__C2BPaymentConfirmationRequest_KYCInfo (16)
/* complex XSD type 'ns1:C2BPaymentConfirmationRequest-KYCInfo': */
class SOAP_CMAC _ns1__C2BPaymentConfirmationRequest_KYCInfo {
      public:
        /// Required element 'KYCName' of XSD type 'xsd:string'
        std::string KYCName;
        /// Required element 'KYCValue' of XSD type 'xsd:string'
        std::string KYCValue;
      public:
        /// Return unique type id SOAP_TYPE__ns1__C2BPaymentConfirmationRequest_KYCInfo
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__C2BPaymentConfirmationRequest_KYCInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__C2BPaymentConfirmationRequest_KYCInfo, default initialized and not managed by a soap context
        virtual _ns1__C2BPaymentConfirmationRequest_KYCInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__C2BPaymentConfirmationRequest_KYCInfo); }
      public:
        /// Constructor with initializations
        _ns1__C2BPaymentConfirmationRequest_KYCInfo() : KYCName(), KYCValue() { }
        virtual ~_ns1__C2BPaymentConfirmationRequest_KYCInfo() { }
        /// Friend allocator used by soap_new__ns1__C2BPaymentConfirmationRequest_KYCInfo(struct soap*, int)
        friend SOAP_FMAC1 _ns1__C2BPaymentConfirmationRequest_KYCInfo * SOAP_FMAC2 soap_instantiate__ns1__C2BPaymentConfirmationRequest_KYCInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mpesab2b.h:153 */
#ifndef SOAP_TYPE__ns1__C2BPaymentConfirmationRequest
#define SOAP_TYPE__ns1__C2BPaymentConfirmationRequest (10)
/* complex XSD type 'ns1:C2BPaymentConfirmationRequest': */
class SOAP_CMAC _ns1__C2BPaymentConfirmationRequest {
      public:
        /// Required element 'TransactionType' of XSD type 'xsd:string'
        std::string TransactionType;
        /// Required element 'TransID' of XSD type 'xsd:string'
        std::string TransID;
        /// Required element 'TransTime' of XSD type 'xsd:string'
        std::string TransTime;
        /// Required element 'TransAmount' of XSD type 'xsd:string'
        std::string TransAmount;
        /// Required element 'BusinessShortCode' of XSD type 'xsd:string'
        std::string BusinessShortCode;
        /// Optional element 'BillRefNumber' of XSD type 'xsd:string'
        std::string *BillRefNumber;
        /// Optional element 'InvoiceNumber' of XSD type 'xsd:string'
        std::string *InvoiceNumber;
        /// Required element 'OrgAccountBalance' of XSD type 'xsd:string'
        std::string OrgAccountBalance;
        /// Optional element 'ThirdPartyTransID' of XSD type 'xsd:string'
        std::string *ThirdPartyTransID;
        /// Required element 'MSISDN' of XSD type 'xsd:string'
        std::string MSISDN;
        /// Optional element 'KYCInfo' of XSD type 'ns1:C2BPaymentConfirmationRequest-KYCInfo'
        std::vector<_ns1__C2BPaymentConfirmationRequest_KYCInfo> KYCInfo;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__C2BPaymentConfirmationRequest
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__C2BPaymentConfirmationRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__C2BPaymentConfirmationRequest, default initialized and not managed by a soap context
        virtual _ns1__C2BPaymentConfirmationRequest *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__C2BPaymentConfirmationRequest); }
      public:
        /// Constructor with initializations
        _ns1__C2BPaymentConfirmationRequest() : TransactionType(), TransID(), TransTime(), TransAmount(), BusinessShortCode(), BillRefNumber(), InvoiceNumber(), OrgAccountBalance(), ThirdPartyTransID(), MSISDN(), KYCInfo(), soap() { }
        virtual ~_ns1__C2BPaymentConfirmationRequest() { }
        /// Friend allocator used by soap_new__ns1__C2BPaymentConfirmationRequest(struct soap*, int)
        friend SOAP_FMAC1 _ns1__C2BPaymentConfirmationRequest * SOAP_FMAC2 soap_instantiate__ns1__C2BPaymentConfirmationRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mpesab2b.h:461 */
#ifndef SOAP_TYPE___ns1__ValidateC2BPayment
#define SOAP_TYPE___ns1__ValidateC2BPayment (21)
/* Wrapper: */
struct SOAP_CMAC __ns1__ValidateC2BPayment {
      public:
        /** Optional element 'ns1:C2BPaymentValidationRequest' of XSD type 'ns1:C2BPaymentValidationRequest' */
        _ns1__C2BPaymentValidationRequest *ns1__C2BPaymentValidationRequest;
      public:
        /** Return unique type id SOAP_TYPE___ns1__ValidateC2BPayment */
        long soap_type() const { return SOAP_TYPE___ns1__ValidateC2BPayment; }
        /** Constructor with member initializations */
        __ns1__ValidateC2BPayment() : ns1__C2BPaymentValidationRequest() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__ValidateC2BPayment * SOAP_FMAC2 soap_instantiate___ns1__ValidateC2BPayment(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mpesab2b.h:531 */
#ifndef SOAP_TYPE___ns1__ConfirmC2BPaymentResponse
#define SOAP_TYPE___ns1__ConfirmC2BPaymentResponse (25)
/* Wrapper: */
struct SOAP_CMAC __ns1__ConfirmC2BPaymentResponse {
      public:
        /** Required element 'ns1:C2BPaymentConfirmationResult' of XSD type 'xsd:string' */
        std::string ns1__C2BPaymentConfirmationResult;
      public:
        /** Return unique type id SOAP_TYPE___ns1__ConfirmC2BPaymentResponse */
        long soap_type() const { return SOAP_TYPE___ns1__ConfirmC2BPaymentResponse; }
        /** Constructor with member initializations */
        __ns1__ConfirmC2BPaymentResponse() : ns1__C2BPaymentConfirmationResult() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__ConfirmC2BPaymentResponse * SOAP_FMAC2 soap_instantiate___ns1__ConfirmC2BPaymentResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mpesab2b.h:531 */
#ifndef SOAP_TYPE___ns1__ConfirmC2BPayment
#define SOAP_TYPE___ns1__ConfirmC2BPayment (26)
/* Wrapper: */
struct SOAP_CMAC __ns1__ConfirmC2BPayment {
      public:
        /** Optional element 'ns1:C2BPaymentConfirmationRequest' of XSD type 'ns1:C2BPaymentConfirmationRequest' */
        _ns1__C2BPaymentConfirmationRequest *ns1__C2BPaymentConfirmationRequest;
      public:
        /** Return unique type id SOAP_TYPE___ns1__ConfirmC2BPayment */
        long soap_type() const { return SOAP_TYPE___ns1__ConfirmC2BPayment; }
        /** Constructor with member initializations */
        __ns1__ConfirmC2BPayment() : ns1__C2BPaymentConfirmationRequest() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__ConfirmC2BPayment * SOAP_FMAC2 soap_instantiate___ns1__ConfirmC2BPayment(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mpesab2b.h:639 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (27)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* mpesab2b.h:639 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (28)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XSD type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* mpesab2b.h:639 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (30)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_T assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* mpesab2b.h:639 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (33)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XSD type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* mpesab2b.h:639 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (34)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XSD type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XSD type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XSD type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XSD type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XSD type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XSD type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
typedef char *_QName;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* _ns1__C2BPaymentConfirmationRequest_KYCInfo has binding name '_ns1__C2BPaymentConfirmationRequest_KYCInfo' for type '' */
#ifndef SOAP_TYPE__ns1__C2BPaymentConfirmationRequest_KYCInfo
#define SOAP_TYPE__ns1__C2BPaymentConfirmationRequest_KYCInfo (16)
#endif

/* _ns1__C2BPaymentValidationRequest_KYCInfo has binding name '_ns1__C2BPaymentValidationRequest_KYCInfo' for type '' */
#ifndef SOAP_TYPE__ns1__C2BPaymentValidationRequest_KYCInfo
#define SOAP_TYPE__ns1__C2BPaymentValidationRequest_KYCInfo (13)
#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (11)
#endif

/* _ns1__C2BPaymentConfirmationRequest has binding name '_ns1__C2BPaymentConfirmationRequest' for type '' */
#ifndef SOAP_TYPE__ns1__C2BPaymentConfirmationRequest
#define SOAP_TYPE__ns1__C2BPaymentConfirmationRequest (10)
#endif

/* _ns1__C2BPaymentValidationResult has binding name '_ns1__C2BPaymentValidationResult' for type '' */
#ifndef SOAP_TYPE__ns1__C2BPaymentValidationResult
#define SOAP_TYPE__ns1__C2BPaymentValidationResult (9)
#endif

/* _ns1__C2BPaymentValidationRequest has binding name '_ns1__C2BPaymentValidationRequest' for type '' */
#ifndef SOAP_TYPE__ns1__C2BPaymentValidationRequest
#define SOAP_TYPE__ns1__C2BPaymentValidationRequest (8)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (34)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (33)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (30)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (28)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (27)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (36)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (35)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (29)
#endif

/* _ns1__C2BPaymentConfirmationRequest * has binding name 'PointerTo_ns1__C2BPaymentConfirmationRequest' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__C2BPaymentConfirmationRequest
#define SOAP_TYPE_PointerTo_ns1__C2BPaymentConfirmationRequest (22)
#endif

/* _ns1__C2BPaymentValidationRequest * has binding name 'PointerTo_ns1__C2BPaymentValidationRequest' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__C2BPaymentValidationRequest
#define SOAP_TYPE_PointerTo_ns1__C2BPaymentValidationRequest (18)
#endif

/* std::string * has binding name 'PointerTostd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (12)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/* std::vector<_ns1__C2BPaymentConfirmationRequest_KYCInfo>  has binding name 'std__vectorTemplateOf_ns1__C2BPaymentConfirmationRequest_KYCInfo' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_ns1__C2BPaymentConfirmationRequest_KYCInfo
#define SOAP_TYPE_std__vectorTemplateOf_ns1__C2BPaymentConfirmationRequest_KYCInfo (17)
#endif

/* std::vector<_ns1__C2BPaymentValidationRequest_KYCInfo>  has binding name 'std__vectorTemplateOf_ns1__C2BPaymentValidationRequest_KYCInfo' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_ns1__C2BPaymentValidationRequest_KYCInfo
#define SOAP_TYPE_std__vectorTemplateOf_ns1__C2BPaymentValidationRequest_KYCInfo (14)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
